; IO Routines for "ROM" and simple test code
;

; zero-page variables
define		X		$f5
define		Y		$f6
define		SCREEN_PTR	$f7
define		SCREEN_PTR_HI	$f8
define		SCROLL_SRC	$f9
define		SCROLL_SRC_HI	$fa
define		SCROLL_DST	$fb
define		SCROLL_DST_HI	$fc
define		TEMP_Y		$fd

; constants
define		SCREEN_BASE	$f000 ; first char on screen
define		SCREEN_LAST	$f780 ; start of last row
define		ROWS		25
define		COLS		80

; routine vectors/entry points
define		SCINIT		$ff81 ; initialize/clear screen
define		CHRIN		$ffcf ; get one char form keyboard
define		CHROUT		$ffd2 ; output one char to screen
define		SCREEN		$ffed ; get screen size
define		PLOT		$fff0 ; get/set cursor coordinates

; main code
		jsr SCINIT
		jsr CHRIN

loop:		sec
		jsr PLOT
		ora #$80
		jsr CHROUT
		lda #$83	; left
		jsr CHROUT

getkey:		jsr CHRIN
		cmp #$00
		beq getkey

		pha
		sec
		jsr PLOT
		and #$7f
		jsr CHROUT
		lda #$83	; left
		jsr CHROUT
		pla
		jsr CHROUT

		jmp loop

*=$fe00

; ==================================================
; GOTO :: position to (X,Y) on screen

GOTO:		pha
		txa
		pha
		tya
		pha

		ldy Y
		lda goto_tbl_low,y
		clc
		adc X
		sta SCREEN_PTR
		lda goto_tbl_hi,y
		adc #$00
		sta SCREEN_PTR_HI
		
		pla
		tay
		pla
		tax
		pla

		rts

goto_tbl_low:
dcb $00,$50,$A0,$F0,$40,$90,$E0,$30,$80,$D0,$20
dcb $70,$C0,$10,$60,$B0,$00,$50,$A0,$F0,$40,$90
dcb $E0,$30,$80

goto_tbl_hi:
dcb $F0,$F0,$F0,$F0,$F1,$F1,$F1,$F2,$F2,$F2,$F3
dcb $F3,$F3,$F4,$F4,$F4,$F5,$F5,$F5,$F5,$F6,$F6
dcb $F6,$F7,$F7

; ==================================================
; PUT :: output a printable or control character
;        regA = character

R_PUT:		cmp #$08
		beq C_BS
		cmp #$0a
		beq C_RETURN
		cmp #$0d
		beq C_RETURN
		cmp #$80
		beq C_UP
		cmp #$81
		beq C_RIGHT
		cmp #$82
		beq C_DOWN
		cmp #$83
		beq C_LEFT

; ==================================================
; CHROUT :: output a printable character
;           regA = character

R_CHROUT:	jsr GOTO
		sty TEMP_Y

		ldy #$00
		sta (SCREEN_PTR),y

		jsr C_RIGHT

		ldy TEMP_Y
		rts

; ==================================================
; C_BS :: backspace

C_BS:		pha
		tya
		pha
		txa
		pha

		jsr C_LEFT
		jsr GOTO
		ldy #$00
		lda #$20
		sta (SCREEN_PTR),y

		ldx COLS
		dex

		pla
		tax
		pla
		tay
		pla

		rts

; ==================================================
; C_RETURN :: carriage return

C_RETURN:	pha
		
		lda #$00
		sta X
		jsr C_DOWN

		pla
		rts

; ==================================================
; C_RIGHT :: move cursor one position right

C_RIGHT:	pha
		
		inc X
		lda #COLS
		cmp X
		bne c_right_done

		lda #$00
		sta X
		jsr C_DOWN

c_right_done:	pla
		rts

; ==================================================
; C_LEFT :: move cursor one position left

C_LEFT:		pha
		
		dec X
		bpl c_left_done

		lda Y
		beq c_left_home

		lda #COLS
		sta X
		jsr C_UP

		clc
		bcc c_left_done

c_left_home:	lda #$00
		sta X
		sta Y

c_left_done:	pla
		rts

; ==================================================
; C_DOWN :: move cursor one position down

C_DOWN:		pha

		inc Y
		lda #ROWS
		cmp Y
		bne c_down_done

		jsr SCROLL

		dec Y

c_down_done:	pla
		rts

; ==================================================
; C_UP :: move cursor one position up

C_UP:		dec Y
		bpl c_up_done

		inc Y ; go to first row if off screen

c_up_done:	rts

; ==================================================
; CLEAR :: clear the screen

R_CLEAR:	pha
		tya
		pha

		LDA #$00
		STA X
		STA Y
		jsr GOTO
		
		ldy #$00
clear_loop_2:	lda #$20

clear_loop:	sta (SCREEN_PTR),y
		iny
		bne clear_loop

		inc SCREEN_PTR_HI
		lda SCREEN_PTR_HI
		cmp #$f8
		bne clear_loop_2

		jsr GOTO

		pla
		tya
		pla

		rts

; ==================================================
; SCROLL :: scroll screen up one line

R_CHRIN:	lda $ff
		beq chrin_done
		pha
		lda #$00
		sta $ff
		pla
chrin_done:	rts

; ==================================================
; R_SCREEN :: return screen size

R_SCREEN:	ldy #ROWS
		ldx #COLS
		rts

; ==================================================
; R_PLOT :: get/set screen position
; 
; C==0:	set cursor position to (X,Y)
;       return pointer as Y=high, X=low
;
; C==1: read cursor position as (X,Y)
;       return character at position in A

R_PLOT:		bcs plot_read

		stx X
		sty Y
		jsr GOTO
		ldy SCREEN_PTR_HI
		lda SCREEN_PTR
		rts

plot_read:	jsr GOTO
		ldy #$00
		lda (SCREEN_PTR),y
		ldx X
		ldy Y
		rts

; ==================================================
; SCROLL :: scroll screen up one line

SCROLL:		pha
		tya
		pha

		lda #$00
		sta SCROLL_DST
		lda #COLS
		sta SCROLL_SRC
		lda #$f0
		sta SCROLL_SRC_HI
		sta SCROLL_DST_HI

		ldy #$00

scroll_loop:	lda (SCROLL_SRC),y
		sta (SCROLL_DST),y
		iny
		bne scroll_loop

		inc SCROLL_SRC_HI
		inc SCROLL_DST_HI
		lda #$f7
		cmp SCROLL_SRC_HI
		bne scroll_loop

scroll_loop2:	lda (SCROLL_SRC),y
		sta (SCROLL_DST),y
		iny
		cpy #$80
		bne scroll_loop2

		ldy #$00
		lda #$20
clear_last:	sta SCREEN_LAST,y
		iny
		cpy #80
		bne clear_last

		pla
		tay
		pla
		rts

; ================================================
;
; Vector table / entry points

*=$ff81	; SCINIT
		jmp R_CLEAR

*=$ffcf	; CHRIN
		jmp R_CHRIN

*=$ffd2	; CHROUT
		jmp R_PUT

*=$ffed	; SCREEN
		jmp R_SCREEN

*=$fff0	; PLOT
		jmp R_PLOT
